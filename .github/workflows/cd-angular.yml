name: CD Angular

on:
  workflow_call:
    inputs:
      s3-bucket:
        required: true
        type: string
      cloudfront-id:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      build-path:
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      S3_BUCKET_NAME: ${{ inputs.s3-bucket }}
      CLOUDFRONT_ID: ${{ inputs.cloudfront-id }}
      AWS_REGION: ${{ inputs.aws-region }}
      BUILD_PATH: ${{ inputs.build-path }}
    steps:
      # 1️⃣ Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3️⃣ Detectar versão ativa/inativa
      - name: Detect active/inactive version
        id: detect
        run: |
          ACTIVE=$(aws cloudfront get-distribution --id $CLOUDFRONT_ID | jq -r '.Distribution.Origins.Items[0].OriginPath')
          if [[ "$ACTIVE" == "/blue" ]]; then
            INACTIVE="green"
          else
            INACTIVE="blue"
          fi
          echo "ACTIVE=$ACTIVE" >> $GITHUB_ENV
          echo "INACTIVE=$INACTIVE" >> $GITHUB_ENV
          echo "previous-path=$ACTIVE" >> $GITHUB_OUTPUT

      # 4️⃣ Deploy para pasta inativa com timestamp
      - name: Deploy to INACTIVE folder with timestamp
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          INACTIVE_PATH="$INACTIVE/$TIMESTAMP"
          echo "Deploying build to folder $INACTIVE_PATH"
          aws s3 sync $BUILD_PATH s3://$S3_BUCKET_NAME/$INACTIVE_PATH --delete
          echo "DEPLOY_PATH=/$INACTIVE_PATH" >> $GITHUB_ENV

      # 5️⃣ Cleanup builds antigas
      - name: Cleanup old builds
        run: |
          for folder in blue green; do
            builds=$(aws s3 ls s3://$S3_BUCKET_NAME/$folder/ | awk '{print $2}' | sort)
            total=$(echo "$builds" | wc -l)
            if [ $total -gt 3 ]; then
              to_delete=$(echo "$builds" | head -n $(($total - 3)))
              for d in $to_delete; do
                aws s3 rm s3://$S3_BUCKET_NAME/$folder/$d --recursive
              done
            fi
          done

      # 6️⃣ Swap CloudFront
      - name: Swap CloudFront
        run: |
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "$DEPLOY_PATH" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      # 7️⃣ Invalidação de cache CloudFront
      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

      # 8️⃣ Rollback automático
      - name: Rollback if failure
        if: failure()
        run: |
          echo "Rollback triggered. Reverting to previous version: ${{ steps.detect.outputs.previous-path }}"
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "${{ steps.detect.outputs.previous-path }}" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"
