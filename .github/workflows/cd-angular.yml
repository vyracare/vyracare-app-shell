name: Angular CD Modular

on:
  workflow_call:
    inputs:
      branch-name:
        description: 'Branch que disparou o deploy'
        required: true
        type: string
      build-path:
        description: 'Caminho do build a ser deployado'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      S3_BUCKET_NAME:
        required: true
      CLOUDFRONT_ID:
        required: true
      AWS_REGION:
        required: false
      PAT_TOKEN:
        required: true

jobs:
  checkout-build:
    runs-on: ubuntu-latest
    outputs:
      BUILD_PATH: ${{ steps.set-output.outputs.BUILD_PATH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Angular
        run: npm run build -- --configuration production

      - name: Set output build path
        id: set-output
        run: echo "BUILD_PATH=${{ inputs.build-path }}" >> $GITHUB_OUTPUT

  detect-version:
    needs: checkout-build
    runs-on: ubuntu-latest
    outputs:
      INACTIVE: ${{ steps.set-env.outputs.INACTIVE }}
      ACTIVE_PATH: ${{ steps.set-env.outputs.ACTIVE_PATH }}
    env:
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
    steps:
      - name: Detect active/inactive version
        id: set-env
        run: |
          ACTIVE=$(aws cloudfront get-distribution --id $CLOUDFRONT_ID | jq -r '.Distribution.Origins.Items[0].OriginPath')
          if [[ "$ACTIVE" == "/blue" ]]; then
            INACTIVE="green"
          else
            INACTIVE="blue"
          fi
          echo "ACTIVE_PATH=$ACTIVE" >> $GITHUB_OUTPUT
          echo "INACTIVE=$INACTIVE" >> $GITHUB_OUTPUT

  deploy-s3:
    needs: detect-version
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_PATH: ${{ steps.deploy.outputs.DEPLOY_PATH }}
    env:
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      INACTIVE: ${{ needs.detect-version.outputs.INACTIVE }}
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Deploy build to S3
        id: deploy
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          DEPLOY_PATH="/${INACTIVE}/$TIMESTAMP"
          echo "Deploying build to $DEPLOY_PATH"
          aws s3 sync ${{ needs.checkout-build.outputs.BUILD_PATH }} s3://$S3_BUCKET_NAME$DEPLOY_PATH --delete
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_OUTPUT

  swap-cloudfront:
    needs: deploy-s3
    runs-on: ubuntu-latest
    env:
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Swap CloudFront
        run: |
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "${{ needs.deploy-s3.outputs.DEPLOY_PATH }}" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

  cleanup:
    needs: swap-cloudfront
    runs-on: ubuntu-latest
    env:
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
    steps:
      - name: Cleanup old builds
        run: |
          for folder in blue green; do
            builds=$(aws s3 ls s3://$S3_BUCKET_NAME/$folder/ | awk '{print $2}' | sort)
            total=$(echo "$builds" | wc -l)
            if [ $total -gt 3 ]; then
              to_delete=$(echo "$builds" | head -n $(($total - 3)))
              for d in $to_delete; do
                aws s3 rm s3://$S3_BUCKET_NAME/$folder/$d --recursive
              done
            fi
          done

  open-pr-main:
    needs: cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Open Pull Request to main
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          source_branch: ${{ inputs.branch-name }}
          destination_branch: main
          pr_title: "PR automatic ${{ inputs.branch-name }} into main"
          pr_body: |
            PR autom√°tica criada pelo pipeline.
            Branch de origem: `${{ inputs.branch-name }}`

  rollback:
    if: failure()
    needs: deploy-s3
    runs-on: ubuntu-latest
    env:
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Rollback CloudFront to previous version
        run: |
          PREVIOUS_PATH=$(aws cloudfront get-distribution --id $CLOUDFRONT_ID | jq -r '.Distribution.Origins.Items[0].OriginPath')
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "$PREVIOUS_PATH" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
