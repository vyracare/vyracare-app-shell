name: Angular CD Blue-Green Modular

on:
  workflow_call:
    inputs:
      branch-name:
        description: 'Branch que disparou o deploy'
        required: true
        type: string
      build-path:
        description: 'Caminho do build a ser deployado'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      S3_BUCKET_NAME:
        required: true
      CLOUDFRONT_ID:
        required: true
      AWS_REGION:
        required: false
      PAT_TOKEN:
        required: true

jobs:
  deploy-s3:
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_PATH: ${{ steps.deploy.outputs.DEPLOY_PATH }}
    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Detect active/inactive version
        id: detect
        run: |
          ACTIVE=$(aws cloudfront get-distribution --id ${{ secrets.CLOUDFRONT_ID }} | jq -r '.Distribution.Origins.Items[0].OriginPath')
          if [[ "$ACTIVE" == "/blue" ]]; then
            INACTIVE="green"
          else
            INACTIVE="blue"
          fi
          echo "INACTIVE=$INACTIVE" >> $GITHUB_ENV
          echo "ACTIVE_PATH=$ACTIVE" >> $GITHUB_ENV
          echo "PREVIOUS_PATH=$ACTIVE" >> $GITHUB_OUTPUT

      - name: Deploy build to S3
        id: deploy
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          DEPLOY_PATH="/${INACTIVE}/$TIMESTAMP"
          echo "Deploying ${{ inputs.build-path }} to $DEPLOY_PATH"
          aws s3 sync ${{ inputs.build-path }} s3://$S3_BUCKET_NAME$DEPLOY_PATH --delete
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_OUTPUT

      - name: Swap CloudFront to new version
        run: |
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id ${{ secrets.CLOUDFRONT_ID }})
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "${{ steps.deploy.outputs.DEPLOY_PATH }}" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id ${{ secrets.CLOUDFRONT_ID }} --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/*"

      - name: Cleanup old builds
        run: |
          for folder in blue green; do
            builds=$(aws s3 ls s3://$S3_BUCKET_NAME/$folder/ | awk '{print $2}' | sort)
            total=$(echo "$builds" | wc -l)
            if [ $total -gt 3 ]; then
              to_delete=$(echo "$builds" | head -n $(($total - 3)))
              for d in $to_delete; do
                aws s3 rm s3://$S3_BUCKET_NAME/$folder/$d --recursive
              done
            fi
          done

      - name: Open Pull Request to main
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          source_branch: ${{ inputs.branch-name }}
          destination_branch: main
          pr_title: "Merge ${{ inputs.branch-name }} into main"
          pr_body: |
            PR autom√°tica criada pelo pipeline.
            Branch de origem: `${{ inputs.branch-name }}`

      - name: Rollback if failure
        if: failure()
        run: |
          echo "Rollback triggered. Reverting to previous version: ${{ steps.detect.outputs.PREVIOUS_PATH }}"
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id ${{ secrets.CLOUDFRONT_ID }})
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "${{ steps.detect.outputs.PREVIOUS_PATH }}" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id ${{ secrets.CLOUDFRONT_ID }} --if-match $ETAG --distribution-config "$UPDATED_CONFIG"
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/*"
