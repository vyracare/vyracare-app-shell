name: Deploy Angular Shell (Blue-Green Segregado)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
      AWS_REGION: us-east-1

    steps:

      # ================================
      # 1Ô∏è‚É£ Checkout do c√≥digo
      # ================================
      - name: Checkout repository
        uses: actions/checkout@v3

      # ================================
      # 2Ô∏è‚É£ Setup Node.js
      # ================================
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # ================================
      # 3Ô∏è‚É£ Instalar depend√™ncias
      # ================================
      - name: Install dependencies
        run: npm ci

      # ================================
      # 4Ô∏è‚É£ Build Angular Shell
      # ================================
      - name: Build Angular Shell
        run: npm run build -- --configuration production

      # ================================
      # 5Ô∏è‚É£ Executar testes unit√°rios
      # ================================
      - name: Run unit tests
        run: |
          npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      # ================================
      # 6Ô∏è‚É£ Upload coverage report
      # ================================
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      # ================================
      # 7Ô∏è‚É£ Configurar AWS CLI
      # ================================
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ================================
      # 8Ô∏è‚É£ Detectar vers√£o ativa/inativa
      # ================================
      - name: Detect active version
        id: detect
        run: |
          ACTIVE=$(aws cloudfront get-distribution --id $CLOUDFRONT_ID | jq -r '.Distribution.Origins.Items[0].OriginPath')
          if [[ "$ACTIVE" == "/blue" ]]; then
            echo "ACTIVE=blue" >> $GITHUB_ENV
            echo "INACTIVE=green" >> $GITHUB_ENV
          else
            echo "ACTIVE=green" >> $GITHUB_ENV
            echo "INACTIVE=blue" >> $GITHUB_ENV
          fi
          echo "Active version: $ACTIVE"
          echo "Inactive version: $INACTIVE"

      # ================================
      # 9Ô∏è‚É£ Deploy build para pasta inativa com timestamp
      # ================================
      - name: Deploy to INACTIVE folder
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          INACTIVE_FOLDER="$INACTIVE/$TIMESTAMP"
          echo "Deploying build to folder $INACTIVE_FOLDER"
          aws s3 sync ./dist/vyracare-app-shell s3://$S3_BUCKET_NAME/$INACTIVE_FOLDER --delete
          echo "INACTIVE_FOLDER=$INACTIVE_FOLDER" >> $GITHUB_ENV

      # ================================
      # üîü Swap CloudFront para nova vers√£o
      # ================================
      - name: Swap CloudFront to INACTIVE
        id: swap
        run: |
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          PREVIOUS_PATH=$(echo $CONFIG | jq -r '.Origins.Items[0].OriginPath')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "/$INACTIVE/$TIMESTAMP" '.Origins.Items[0].OriginPath=$path')
          echo "PREVIOUS_PATH=$PREVIOUS_PATH" >> $GITHUB_ENV
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      # ================================
      # 1Ô∏è‚É£1Ô∏è‚É£ Invalida√ß√£o de cache CloudFront
      # ================================
      - name: Invalidate CloudFront cache
        if: success()
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

      # ================================
      # 1Ô∏è‚É£2Ô∏è‚É£ Rollback autom√°tico em caso de falha
      # ================================
      - name: Rollback if failure detected
        if: failure()
        run: |
          echo "Rollback triggered. Reverting to previous version: $PREVIOUS_PATH"
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "$PREVIOUS_PATH" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      # ================================
      # 1Ô∏è‚É£3Ô∏è‚É£ Limpeza de builds antigas
      # ================================
      - name: Cleanup old builds
        if: success()
        run: |
          for folder in blue green; do
            builds=$(aws s3 ls s3://$S3_BUCKET_NAME/$folder/ | awk '{print $2}' | sort)
            delete_count=$(echo "$builds" | wc -l)
            if [ $delete_count -gt 3 ]; then
              to_delete=$(echo "$builds" | head -n $(($delete_count - 3)))
              for d in $to_delete; do
                echo "Deleting old build: $folder/$d"
                aws s3 rm s3://$S3_BUCKET_NAME/$folder/$d --recursive
              done
            fi
          done
