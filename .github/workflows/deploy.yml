name: Angular Shell CI/CD (Blue-Green)

on:
  push:
    branches:
      - "main"

jobs:

  # ================================
  # 1️⃣ Build
  # ================================
  build:
    runs-on: ubuntu-latest
    outputs:
      build-folder: ${{ steps.set-output.outputs.build-folder }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Angular Shell
        run: npm run build -- --configuration production

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: dist/vyracare-app-shell

      - name: Set build folder output
        id: set-output
        run: echo "build-folder=dist/vyracare-app-shell" >> $GITHUB_OUTPUT

  # ================================
  # 2️⃣ Test
  # ================================
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/vyracare-app-shell

      - name: Run unit tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless

  # ================================
  # 3️⃣ Deploy (somente main)
  # ================================
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    env:
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
      AWS_REGION: us-east-1
    outputs:
      previous-path: ${{ steps.detect.outputs.previous-path }}
      deploy-path: ${{ steps.deploy.outputs.deploy-path }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: dist/vyracare-app-shell

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Detect active/inactive version
      - name: Detect active version
        id: detect
        run: |
          ACTIVE=$(aws cloudfront get-distribution --id $CLOUDFRONT_ID | jq -r '.Distribution.Origins.Items[0].OriginPath')
          if [[ "$ACTIVE" == "/blue" ]]; then
            INACTIVE="green"
          else
            INACTIVE="blue"
          fi
          echo "ACTIVE=$ACTIVE" >> $GITHUB_ENV
          echo "INACTIVE=$INACTIVE" >> $GITHUB_ENV
          echo "previous-path=$ACTIVE" >> $GITHUB_OUTPUT
          echo "Active=$ACTIVE | Inactive=$INACTIVE"

      # Deploy build
      - name: Deploy build to inactive folder
        id: deploy
        run: |
          INACTIVE=$INACTIVE
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          DEPLOY_PATH="$INACTIVE/$TIMESTAMP"
          aws s3 sync dist/vyracare-app-shell s3://$S3_BUCKET_NAME/$DEPLOY_PATH --delete
          echo "deploy-path=$DEPLOY_PATH" >> $GITHUB_OUTPUT

      # Update deploy history
      - name: Update deploy-history.json
        run: |
          HISTORY_FILE="deploy-history.json"
          if aws s3 ls s3://$S3_BUCKET_NAME/$HISTORY_FILE; then
            aws s3 cp s3://$S3_BUCKET_NAME/$HISTORY_FILE $HISTORY_FILE
          else
            echo "[]" > $HISTORY_FILE
          fi

          jq --arg path "$DEPLOY_PATH" '
            map(.active = false) + [{"timestamp": "'$TIMESTAMP'", "path": $path, "active": true}]
          ' $HISTORY_FILE > tmp.json && mv tmp.json $HISTORY_FILE

          aws s3 cp $HISTORY_FILE s3://$S3_BUCKET_NAME/$HISTORY_FILE

      # Swap CloudFront
      - name: Swap CloudFront to inactive
        run: |
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "/$DEPLOY_PATH" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      # Invalidate cache
      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"

  # ================================
  # 4️⃣ Rollback automático
  # ================================
  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && github.ref == 'refs/heads/main'
    env:
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
      AWS_REGION: us-east-1
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback CloudFront
        run: |
          HISTORY_FILE="deploy-history.json"
          aws s3 cp s3://$S3_BUCKET_NAME/$HISTORY_FILE $HISTORY_FILE
          PREVIOUS_PATH=$(jq -r '.[] | select(.active==false) | .path' $HISTORY_FILE | tail -n 1)
          echo "Rolling back to $PREVIOUS_PATH"
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id $CLOUDFRONT_ID)
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "$PREVIOUS_PATH" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id $CLOUDFRONT_ID --if-match $ETAG --distribution-config "$UPDATED_CONFIG"
