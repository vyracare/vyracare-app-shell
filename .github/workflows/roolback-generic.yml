name: Blue-Green Rollback Manual

on:
  workflow_dispatch:
    inputs:
      rollback-path:
        description: 'Caminho da versão para rollback (ex: /blue/20250914120000). Se vazio, reverterá para a última versão ativa.'
        required: false
        default: ''
      s3-bucket:
        description: 'Nome do bucket S3'
        required: true
      cloudfront-id:
        description: 'ID da distribuição CloudFront'
        required: true
      aws-region:
        description: 'Região AWS'
        required: true
        default: 'us-east-1'

jobs:
  rollback:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws-region }}

      # 2️⃣ Determinar versão de rollback
      - name: Determine rollback version
        id: determine
        run: |
          if [ -z "${{ github.event.inputs.rollback-path }}" ]; then
            echo "Nenhum rollback-path fornecido. Detectando última versão ativa..."
            ACTIVE=$(aws cloudfront get-distribution --id ${{ github.event.inputs.cloudfront-id }} | jq -r '.Distribution.Origins.Items[0].OriginPath')
            echo "rollback_path=$ACTIVE" >> $GITHUB_ENV
          else
            echo "rollback_path=${{ github.event.inputs.rollback-path }}" >> $GITHUB_ENV
          fi
          echo "Rollback version: $rollback_path"

      # 3️⃣ Atualizar CloudFront para rollback
      - name: Execute rollback
        run: |
          echo "Executando rollback para $rollback_path"
          DISTRIBUTION_CONFIG=$(aws cloudfront get-distribution-config --id ${{ github.event.inputs.cloudfront-id }})
          ETAG=$(echo $DISTRIBUTION_CONFIG | jq -r '.ETag')
          CONFIG=$(echo $DISTRIBUTION_CONFIG | jq '.DistributionConfig')
          UPDATED_CONFIG=$(echo $CONFIG | jq --arg path "$rollback_path" '.Origins.Items[0].OriginPath=$path')
          aws cloudfront update-distribution --id ${{ github.event.inputs.cloudfront-id }} --if-match $ETAG --distribution-config "$UPDATED_CONFIG"

      # 4️⃣ Invalidação de cache
      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidando cache do CloudFront"
          aws cloudfront create-invalidation --distribution-id ${{ github.event.inputs.cloudfront-id }} --paths "/*"
